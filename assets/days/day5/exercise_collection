1) Write a program that reads something from the keyboard and print it to the screen.
2) Write a program that reads a sequence from a file and print it to the screen. Run it.
3) Write a program that counts how many times the four bases occur in a DNA sequence. The program should:
-Store the DNA sequence in a variable.
-Count how often each base occurs.
-Write all four numbers to the screen.
Test it with a DNA sequence for which you know the result, for instance “AAAACCCGGT”. This approach makes it much easier to discover small program errors.
4) Retrieve the 1132-residue sequence of human telomerase reverse transcriptase isoform 1 from the NCBI protein database. Choose the FASTA format. Copy the sequence to a text file (telomerase.txt). Write a program that reads the telomerase.txt file and prints first the whole sequence and then the sequence residue by residue. 
5) Write a program that reads the telomerase.txt file and prints its content line by line.
6) Which amino acid is the most frequent in the sequence of the telomerase reverse transcriptase isoform 1?
7) Open the file SingleSeq.fasta, read its content line by line and print it
8) Open the file SingleSeq.fasta, read its content line by line and write it to another file.
9) Read a sequence in FASTA format and print only the header of the sequence   
10) Read a file in FASTA format and write to a new file only the header of the record.
11) Read a file in FASTA format and write the header to a file and the sequence to a different one.
12) Read a FASTA file line by line. Save the header in a variable and the sequence in a different one. Print header and sequence separately
13) Implement program 13 by counting the number of cysteine ("C") residues in the sequence.Print separately header, sequence and the number of cysteine residues 
14) Read a file in FASTA format line-by-line. Print or write the record to a file only if the sequence is from Homo sapiens.
15) Download a Uniprot multiple sequence FASTA file. Write the record headers to a new file. 
16) Read a file in FASTA format and copy to a new file the records' AC.
17) Read a multiple sequence FASTA file line by line. Save the header in a variable and the sequence in a different one. Print header and sequence separately.
18) Read a multiple sequence FASTA file and write to a new file only the records from Homo sapiens.
19) Read a multiple sequence file in FASTA format and only write to a new file the records the sequences of which starts with a methionine ('M') and have at least two tryptophan residues ('W').
20) Read a Genbank record and write to a file the nucleotide sequence in FASTA format.
21) Extract and write to a file the gene sequence from the Candida albicans genomic DNA, chromosome 7, complete sequence (file ap006852.gbk).
22) Read 10 SwissProt ACs from a file. Store them into a list. Print the list.
23) Create a list containing Uniprot ACs extracted from a FASTA file. Print the list.
24) Read the human FASTA file one record after the other. Check if the record header contains one of the 10 ACs. If YES, copy the header to a new file.
25) Read a multiple sequence file in FASTA format and write to a new file only the records the Uniprot ACs of which are present in the list created in Exercise 22.
26) Create a list containing Uniprot ACs extracted from a FASTA file. Print the list.
27) Read the human FASTA file one record after the other. Check if the record header contains one of the 10 ACs. If YES, copy the header to a new file.
28) Read a multiple sequence file in FASTA format and write to a new file only the records the Uniprot ACs of which are present in the list created in Exercise 22.
29) Write a function triangle_area(b, h) that returns the area of a triangle. Call the function for b = 2.28 and h = 3.55. Print the result.
30) Define a function with two arguments: get_values(arg1, arg2) that returns the sum, the difference, and the product of arg1 and arg2.
31) Write a function that takes as arguments two points [x1, y1, z1] and [x2, y2, z2] and returns the distance between the two points.

32a) Write a function that takes as input a file name (of a FASTA file), opens the file, returns the header of the sequence record. Print the header. 
32b) Insert the function call in a for loop running on a list of 3 sequence file names.

33) Write a function that takes as argument a Genbank record and returns the nucleotide sequence in FASTA format (re-use the program you wrote in exercise 20).

34a) Write a program that reads the file with neuron lengths (neuron_data.txt) and saves an identical copy of the file.
34b) Extend the program so that neuron lengths are stored as floating point numbers into a list.

35a) Write a program that reads the file neuron_data-2.txt, stores primary neurons to a file and secondary neurons to a different file.
35b) Extend the program so that it stores primary and secondary neuron lengths to different lists.

36a) Extend program 34 so that it calculates the neuron length average and prints it.
36b) Extend program 35 so that it calculates the neuron length average separately for primary and secondary neurons. Print the two averages: which neurons are on average longer?
36c) Extend program so that it calculates the standard deviation of the neuron length.

37) Use two lists with data from neuron_data-2.txt to write a table identical to neuron_data-2.txt. Do it using string concatenation.
38) Use two lists with data from neuron_data-2.txt to write a table identical to neuron_data-2.txt. Do it using string formatting.
39) Write a program that reads the neuron_data-2.txt file, calculates the number of primary neurons, their total length, and the shortest and the longest lengths. Write the results to a file using string formatting. You can repeat the exercise for secondary neurons. 
40) Sort a table, convert its elements  to strings  and write it to a file.
41)From neuron_data.txt generate two tables, one for primary and one for secondary neurons.
42) Sort the primary neuron’s table and show the three longest neurons.
43) Turn the table and calculate the length average
44) Create an empty table of 10 x 10 cells.Fill the table with the numbers from 1 to 100. Save the table to a tab-separated file.
45) Using the codonAMINO dictonary from tgac.py translate the sequence in rna_seq.fasta. Use a single reading frame.
46) Implement program 45 for the three reading frames.
47) Read the ap006852.gbk file into a program (read_gbk.py) from the command line; Read the file line-by-line and print the line corresponding to the 'LOCUS' identifier; Run the program.
48) Run Blastp against the nr.00 dataset from a script for the three sequences:
seqs = ['P00519', 'P05480', 'P12931']
Use subprocess and a tabular format for the output.

The option for the output format is -outfmt
0 = pairwise,
1 = query-anchored showing identities,
2 = query-anchored no identities,
3 = flat query-anchored, show identities,
4 = flat query-anchored, no identities,
5 = XML Blast output,
6 = tabular,
7 = tabular with comment lines,
8 = Text ASN.1,
9 = Binary ASN.1
10 = Comma-separated values

49) Read the three blast output files and write to a new file file the values in the first and the third columns just for the first line of each file.

